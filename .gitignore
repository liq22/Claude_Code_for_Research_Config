# ============================================================================
# Claude Code Research Template - Optimized .gitignore
# ============================================================================
# This file ensures clean clone experience while preserving template structure
# All templates and examples are kept, only runtime files are ignored

# ============================================================================
# üöÄ CLAUDE CODE RESEARCH SYSTEM FILES
# ============================================================================

# Claude runtime files (automatically generated during usage)
.claude/Task/*/
.claude/doc/*/
.claude/backups/
.claude/current_session.json
.claude/active_sessions.json
.claude/goals/*.log

# Keep Claude configuration but ignore runtime data
!.claude/agents/
!.claude/config.yaml
!.claude/hooks/
!.claude/goals/agent_goals.yaml
!.claude/goals/README.md

# Execution logs (keep structure, ignore content)
src/logs/executions/*
src/logs/sessions/*
src/logs/agents/*
src/logs/analytics/*
!src/logs/*/.gitkeep
!src/logs/README.md

# Cache system (ignore generated content, keep structure)
src/dev/cache/*
!src/dev/cache/.gitkeep
!src/dev/cache/README.md

# ============================================================================
# üìÅ USER WORKSPACE (keep structure, ignore user content)
# ============================================================================

# User research files (these are personal work files)
workspace/papers/*
workspace/data/*
workspace/figures/*
# Keep workspace structure and documentation
!workspace/*/README.md
!workspace/*/.gitkeep

# ============================================================================
# üêç PYTHON DEVELOPMENT
# ============================================================================

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
*.manifest
*.spec

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py.cover
.hypothesis/
.pytest_cache/
cover/

# Virtual environments
.env
.envrc
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
.pixi

# Python package managers
#poetry.lock  # Uncomment if you want to ignore
#Pipfile.lock # Uncomment if you want to ignore
.pdm-python
.pdm-build/
__pypackages__/

# Python tools
.mypy_cache/
.dmypy.json
dmypy.json
.pyre/
.pytype/
.ruff_cache/
.pypirc

# ============================================================================
# üì¶ NODE.JS
# ============================================================================

# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
package-lock.json
yarn.lock

# ============================================================================
# üíª IDE AND EDITORS
# ============================================================================

# Visual Studio Code
.vscode/settings.json
.vscode/launch.json

# JetBrains IDEs
.idea/

# Vim
*.swp
*.swo
*~

# Cursor AI
.cursorignore
.cursorindexingignore

# ============================================================================
# üñ•Ô∏è OPERATING SYSTEMS
# ============================================================================

# macOS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes

# Windows
ehthumbs.db
Thumbs.db

# Linux
*~

# ============================================================================
# üìÑ DOCUMENTS AND TEMPORARY FILES
# ============================================================================

# Temporary files
*.tmp
*.temp
*.bak
*.swp
*.swo

# Log files (but keep structured logs in src/logs/ directory)
*.log
!src/logs/README.md

# Backup files
*.backup
*.old

# ============================================================================
# üî¨ RESEARCH SPECIFIC
# ============================================================================

# Large datasets (users should use Git LFS or external storage)
*.csv.large
*.json.large
*.xlsx.large
*.h5
*.hdf5
*.pkl
*.pickle

# Model files (typically too large for Git)
*.model
*.ckpt
*.pth
*.pt
*.h5
*.pb
*.onnx

# Jupyter Notebook checkpoints
.ipynb_checkpoints

# Research outputs that shouldn't be version controlled
results/
outputs/
experiments/
trained_models/

# ============================================================================
# üõ†Ô∏è BUILD AND DEPLOYMENT
# ============================================================================

# Build artifacts
target/
*.jar
*.war
*.ear
*.class

# Docker
.dockerignore
Dockerfile.prod

# ============================================================================
# üîê SECURITY AND CREDENTIALS
# ============================================================================

# Environment variables with secrets
.env.local
.env.production
.env.development

# API keys and credentials
config/secrets.yaml
.secrets/
credentials.json
api_keys.txt

# SSH keys
*.pem
*.key
id_rsa
id_dsa

# ============================================================================
# üìä ANALYTICS AND MONITORING
# ============================================================================

# Monitoring and analytics data
analytics/
monitoring/
.abstra/

# Performance profiling
*.prof
*.profile

# ============================================================================
# üöÄ TEMPLATE PRESERVATION NOTES
# ============================================================================
# The following files and directories are KEPT for template functionality:
# 
# ‚úÖ ALWAYS INCLUDED:
# - src/templates/ (all academic paper templates)
# - src/examples/ (all usage examples)  
# - workspace/README.md (user guide)
# - .claude/agents/ (agent definitions)
# - .claude/config.yaml (system configuration)
# - .claude/hooks/ (execution hooks)
# - src/docs/ (documentation files)
# - README.md (main documentation)
# - config/ (configuration files)
# 
# ‚ùå ALWAYS IGNORED:
# - User's personal research files
# - Claude runtime/session data
# - Generated logs and analytics
# - Large data files and models
# - IDE-specific configurations
# - Operating system artifacts
#
# This ensures a clean, professional template that works immediately after clone
# while preserving all necessary structure and documentation.